package com.mybaits.pojo;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.apache.ibatis.session.SqlSession;

import com.mybaits.dao.UserMapper;

public class UserExample {
    protected String orderByClause;

    protected boolean distinct;

    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by JoinPlugin
     * Name of the database table represented by this class
     */
    public static final String TABLE = "t_user";

    /**
     * This field was generated by JoinPlugin
     * SQL query alias of the database table represented by this class
     */
    public static final String ALIAS = "t_user";

    /**
     * This field was generated by JoinPlugin
     * SQL query alias of the database table represented by this class
     */
    public static final String ALIAS_ = "t_user.";

    private List<String> from;

    private Integer limit;

    private Integer offset;

    public UserExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    public UserExample setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
        return this;
    }

    public String getOrderByClause() {
        return orderByClause;
    }

    public UserExample setDistinct(boolean distinct) {
        this.distinct = distinct;
        return this;
    }

    public boolean isDistinct() {
        return distinct;
    }

    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    public UserExample or(Criteria criteria) {
        oredCriteria.add(criteria);
        return this;
    }

    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        criteria.criteria(this);
        return criteria;
    }

    public UserExample clear() {
        from = null;
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
        return this;
    }

    public List<String> getFrom() {
        return from;
    }

    public UserExample addFromClause(String join) {
        if (join == null || (join = join.trim()).length() == 0) return this;
        if (from == null) from = new java.util.ArrayList<String>();
        from.add(join);
        return this;
    }

    /**
     * @param formatString A {@link java.util.Formatter format string} for join expression
     * @param firstArg First argument referenced by the format specifiers in the format string
     * @param secondAndFurtherArgs Second and further arguments referenced by the format specifiers in the format string
     */
    public UserExample addFromClause(String formatString, Object firstArg, Object ... secondAndFurtherArgs) {
        if (formatString == null || (formatString = formatString.trim()).length() == 0) return this;
        if (from == null) from = new java.util.ArrayList<String>();
        Object[] temp = new Object[(secondAndFurtherArgs == null ? 0 : secondAndFurtherArgs.length) + 1];
        if (secondAndFurtherArgs != null) System.arraycopy(secondAndFurtherArgs, 0, temp, 1, secondAndFurtherArgs.length);
        temp[0] = firstArg;
        String formatted = String.format(formatString, temp);
        from.add(formatted);
        return this;
    }

    public List<User> list(SqlSession sql) {
        return sql.getMapper(UserMapper.class).selectByExample(this);
    }

    public List<User> list(UserMapper mapper) {
        return mapper.selectByExample(this);
    }

    public User first(SqlSession sql) {
        java.util.List<User> list = sql.getMapper(UserMapper.class).selectByExample(this);
        return list == null || list.isEmpty() ? null : list.get(0);
    }

    public User first(UserMapper mapper) {
        java.util.List<User> list = mapper.selectByExample(this);
        return list == null || list.isEmpty() ? null : list.get(0);
    }

    public User single(SqlSession sql) {
        java.util.List<User> list = sql.getMapper(UserMapper.class).selectByExample(this);
        return list == null || list.size() != 1 ? null : list.get(0);
    }

    public User single(UserMapper mapper) {
        java.util.List<User> list = mapper.selectByExample(this);
        return list == null || list.size() != 1 ? null : list.get(0);
    }

    public User optional(SqlSession sql) {
        java.util.List<User> list = sql.getMapper(UserMapper.class).selectByExample(this);
        return list == null || list.isEmpty() ? new User() : list.get(0);
    }

    public User optional(UserMapper mapper) {
        java.util.List<User> list = mapper.selectByExample(this);
        return list == null || list.isEmpty() ? new User() : list.get(0);
    }

    public int update(SqlSession sql, User record) {
        return sql.getMapper(UserMapper.class).updateByExample(record, this);
    }

    public int update(UserMapper mapper, User record) {
        return mapper.updateByExample(record, this);
    }

    public int updateSelective(SqlSession sql, User record) {
        return sql.getMapper(UserMapper.class).updateByExampleSelective(record, this);
    }

    public int updateSelective(UserMapper mapper, User record) {
        return mapper.updateByExampleSelective(record, this);
    }

    public int delete(SqlSession sql) {
        return sql.getMapper(UserMapper.class).deleteByExample(this);
    }

    public int delete(UserMapper mapper) {
        return mapper.deleteByExample(this);
    }

    public int count(SqlSession sql) {
        return sql.getMapper(UserMapper.class).countByExample(this);
    }

    public int count(UserMapper mapper) {
        return mapper.countByExample(this);
    }

    public Criteria current() {
        if (oredCriteria == null || oredCriteria.isEmpty()) return createCriteria();
        return oredCriteria.get(oredCriteria.size() - 1);
    }

    public Integer getLimit() {
        return limit;
    }

    public Integer getOffset() {
        return offset;
    }

    public UserExample setLimitAndOffset(Integer limit, Integer offset) {
        if (limit != null && limit > 0) {
            this.limit = limit;
            this.offset = (offset != null && offset > 0) ? offset : null;
        } else {
            this.limit = this.offset = null;
        }
        return this;
    }

    public UserExample setLimit(Integer limit) {
        return setLimitAndOffset(limit, null);
    }

    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("t_user.id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("t_user.id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("t_user.id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("t_user.id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("t_user.id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("t_user.id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("t_user.id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("t_user.id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andIdIn */");return (Criteria) this;}
            addCriterion("t_user.id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andIdNotIn */");return (Criteria) this;}
            addCriterion("t_user.id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("t_user.id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("t_user.id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andUserNameIsNull() {
            addCriterion("t_user.user_name is null");
            return (Criteria) this;
        }

        public Criteria andUserNameIsNotNull() {
            addCriterion("t_user.user_name is not null");
            return (Criteria) this;
        }

        public Criteria andUserNameEqualTo(String value) {
            addCriterion("t_user.user_name =", value, "userName");
            return (Criteria) this;
        }

        public Criteria andUserNameNotEqualTo(String value) {
            addCriterion("t_user.user_name <>", value, "userName");
            return (Criteria) this;
        }

        public Criteria andUserNameGreaterThan(String value) {
            addCriterion("t_user.user_name >", value, "userName");
            return (Criteria) this;
        }

        public Criteria andUserNameGreaterThanOrEqualTo(String value) {
            addCriterion("t_user.user_name >=", value, "userName");
            return (Criteria) this;
        }

        public Criteria andUserNameLessThan(String value) {
            addCriterion("t_user.user_name <", value, "userName");
            return (Criteria) this;
        }

        public Criteria andUserNameLessThanOrEqualTo(String value) {
            addCriterion("t_user.user_name <=", value, "userName");
            return (Criteria) this;
        }

        public Criteria andUserNameLike(String value) {
            addCriterion("t_user.user_name like", value, "userName");
            return (Criteria) this;
        }

        public Criteria andUserNameNotLike(String value) {
            addCriterion("t_user.user_name not like", value, "userName");
            return (Criteria) this;
        }

        public Criteria andUserNameIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andUserNameIn */");return (Criteria) this;}
            addCriterion("t_user.user_name in", values, "userName");
            return (Criteria) this;
        }

        public Criteria andUserNameNotIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andUserNameNotIn */");return (Criteria) this;}
            addCriterion("t_user.user_name not in", values, "userName");
            return (Criteria) this;
        }

        public Criteria andUserNameBetween(String value1, String value2) {
            addCriterion("t_user.user_name between", value1, value2, "userName");
            return (Criteria) this;
        }

        public Criteria andUserNameNotBetween(String value1, String value2) {
            addCriterion("t_user.user_name not between", value1, value2, "userName");
            return (Criteria) this;
        }

        public Criteria andPasswordIsNull() {
            addCriterion("t_user.password is null");
            return (Criteria) this;
        }

        public Criteria andPasswordIsNotNull() {
            addCriterion("t_user.password is not null");
            return (Criteria) this;
        }

        public Criteria andPasswordEqualTo(String value) {
            addCriterion("t_user.password =", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotEqualTo(String value) {
            addCriterion("t_user.password <>", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordGreaterThan(String value) {
            addCriterion("t_user.password >", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordGreaterThanOrEqualTo(String value) {
            addCriterion("t_user.password >=", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordLessThan(String value) {
            addCriterion("t_user.password <", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordLessThanOrEqualTo(String value) {
            addCriterion("t_user.password <=", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordLike(String value) {
            addCriterion("t_user.password like", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotLike(String value) {
            addCriterion("t_user.password not like", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andPasswordIn */");return (Criteria) this;}
            addCriterion("t_user.password in", values, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotIn(List<String> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andPasswordNotIn */");return (Criteria) this;}
            addCriterion("t_user.password not in", values, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordBetween(String value1, String value2) {
            addCriterion("t_user.password between", value1, value2, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotBetween(String value1, String value2) {
            addCriterion("t_user.password not between", value1, value2, "password");
            return (Criteria) this;
        }

        public Criteria andAgeIsNull() {
            addCriterion("t_user.age is null");
            return (Criteria) this;
        }

        public Criteria andAgeIsNotNull() {
            addCriterion("t_user.age is not null");
            return (Criteria) this;
        }

        public Criteria andAgeEqualTo(Integer value) {
            addCriterion("t_user.age =", value, "age");
            return (Criteria) this;
        }

        public Criteria andAgeNotEqualTo(Integer value) {
            addCriterion("t_user.age <>", value, "age");
            return (Criteria) this;
        }

        public Criteria andAgeGreaterThan(Integer value) {
            addCriterion("t_user.age >", value, "age");
            return (Criteria) this;
        }

        public Criteria andAgeGreaterThanOrEqualTo(Integer value) {
            addCriterion("t_user.age >=", value, "age");
            return (Criteria) this;
        }

        public Criteria andAgeLessThan(Integer value) {
            addCriterion("t_user.age <", value, "age");
            return (Criteria) this;
        }

        public Criteria andAgeLessThanOrEqualTo(Integer value) {
            addCriterion("t_user.age <=", value, "age");
            return (Criteria) this;
        }

        public Criteria andAgeIn(List<Integer> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andAgeIn */");return (Criteria) this;}
            addCriterion("t_user.age in", values, "age");
            return (Criteria) this;
        }

        public Criteria andAgeNotIn(List<Integer> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andAgeNotIn */");return (Criteria) this;}
            addCriterion("t_user.age not in", values, "age");
            return (Criteria) this;
        }

        public Criteria andAgeBetween(Integer value1, Integer value2) {
            addCriterion("t_user.age between", value1, value2, "age");
            return (Criteria) this;
        }

        public Criteria andAgeNotBetween(Integer value1, Integer value2) {
            addCriterion("t_user.age not between", value1, value2, "age");
            return (Criteria) this;
        }

        public Criteria andEqualTo(String field, Object value) {
            if (value == null) return andIsNull(field);
            if (value instanceof java.util.Date) value = new java.sql.Date(((java.util.Date)value).getTime());
            addCriterion(field+" = ", value, field);
            return (Criteria)this;
        }

        public Criteria andNotEqualTo(String field, Object value) {
            if (value == null) return andIsNotNull(field);
            if (value instanceof java.util.Date) value = new java.sql.Date(((java.util.Date)value).getTime());
            addCriterion(field+" <> ", value, field);
            return (Criteria)this;
        }

        public Criteria andIsNull(String field) {
            addCriterion(field+" is null");
            return (Criteria)this;
        }

        public Criteria andIsNotNull(String field) {
            addCriterion(field+" is not null");
            return (Criteria)this;
        }

        public Criteria and(String condition) {
            addCriterion(condition);
            return (Criteria)this;
        }

        private List<Integer> arrayOfIntToListOfInteger(int[] values) {
            List<Integer> list = new ArrayList<Integer>();
            if (values != null) for (int i : values) list.add(i);
            return list;
        }

        private List<Integer> arrayOfLongToListOfInteger(long[] values) {
            List<Integer> list = new ArrayList<Integer>();
            if (values != null) for (long i : values) if (i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE) list.add((int)i);
            return list;
        }

        private List<Integer> arrayOfNumberToListOfInteger(Number[] values) {
            List<Integer> list = new ArrayList<Integer>();
            if (values != null) for (Number i : values) if (i != null && i.longValue() >= Integer.MIN_VALUE && i.longValue() <= Integer.MAX_VALUE) list.add(i.intValue());
            return list;
        }

        private List<Integer> setOfNumberToListOfInteger(Set<? extends Number> values) {
            List<Integer> list = new ArrayList<Integer>();
            if (values != null) for (Number i : values) if (i != null && i.longValue() >= Integer.MIN_VALUE && i.longValue() <= Integer.MAX_VALUE) list.add(i.intValue());
            return list;
        }

        public Criteria andIdIn(int[] values) {
            if (values == null || values.length == 0) {addCriterion("1=2 /* andIdIn */");return andIdIn(arrayOfIntToListOfInteger(values));}
            return andIdIn(arrayOfIntToListOfInteger(values));
        }

        public Criteria andIdIn(long[] values) {
            if (values == null || values.length == 0) {addCriterion("1=2 /* andIdIn */");return andIdIn(arrayOfLongToListOfInteger(values));}
            return andIdIn(arrayOfLongToListOfInteger(values));
        }

        public Criteria andIdIn(Number[] values) {
            if (values == null || values.length == 0) {addCriterion("1=2 /* andIdIn */");return andIdIn(arrayOfNumberToListOfInteger(values));}
            return andIdIn(arrayOfNumberToListOfInteger(values));
        }

        public Criteria andIdIn(Set<? extends Number> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andIdIn */");return andIdIn(setOfNumberToListOfInteger(values));}
            return andIdIn(setOfNumberToListOfInteger(values));
        }

        public Criteria andIdNotIn(int[] values) {
            if (values == null || values.length == 0) {addCriterion("1=1 /* andIdNotIn */");return andIdNotIn(arrayOfIntToListOfInteger(values));}
            return andIdNotIn(arrayOfIntToListOfInteger(values));
        }

        public Criteria andIdNotIn(long[] values) {
            if (values == null || values.length == 0) {addCriterion("1=1 /* andIdNotIn */");return andIdNotIn(arrayOfLongToListOfInteger(values));}
            return andIdNotIn(arrayOfLongToListOfInteger(values));
        }

        public Criteria andIdNotIn(Number[] values) {
            if (values == null || values.length == 0) {addCriterion("1=1 /* andIdNotIn */");return andIdNotIn(arrayOfNumberToListOfInteger(values));}
            return andIdNotIn(arrayOfNumberToListOfInteger(values));
        }

        public Criteria andIdNotIn(Set<? extends Number> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andIdNotIn */");return andIdNotIn(setOfNumberToListOfInteger(values));}
            return andIdNotIn(setOfNumberToListOfInteger(values));
        }

        public Criteria andAgeIn(int[] values) {
            if (values == null || values.length == 0) {addCriterion("1=2 /* andAgeIn */");return andAgeIn(arrayOfIntToListOfInteger(values));}
            return andAgeIn(arrayOfIntToListOfInteger(values));
        }

        public Criteria andAgeIn(long[] values) {
            if (values == null || values.length == 0) {addCriterion("1=2 /* andAgeIn */");return andAgeIn(arrayOfLongToListOfInteger(values));}
            return andAgeIn(arrayOfLongToListOfInteger(values));
        }

        public Criteria andAgeIn(Number[] values) {
            if (values == null || values.length == 0) {addCriterion("1=2 /* andAgeIn */");return andAgeIn(arrayOfNumberToListOfInteger(values));}
            return andAgeIn(arrayOfNumberToListOfInteger(values));
        }

        public Criteria andAgeIn(Set<? extends Number> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=2 /* andAgeIn */");return andAgeIn(setOfNumberToListOfInteger(values));}
            return andAgeIn(setOfNumberToListOfInteger(values));
        }

        public Criteria andAgeNotIn(int[] values) {
            if (values == null || values.length == 0) {addCriterion("1=1 /* andAgeNotIn */");return andAgeNotIn(arrayOfIntToListOfInteger(values));}
            return andAgeNotIn(arrayOfIntToListOfInteger(values));
        }

        public Criteria andAgeNotIn(long[] values) {
            if (values == null || values.length == 0) {addCriterion("1=1 /* andAgeNotIn */");return andAgeNotIn(arrayOfLongToListOfInteger(values));}
            return andAgeNotIn(arrayOfLongToListOfInteger(values));
        }

        public Criteria andAgeNotIn(Number[] values) {
            if (values == null || values.length == 0) {addCriterion("1=1 /* andAgeNotIn */");return andAgeNotIn(arrayOfNumberToListOfInteger(values));}
            return andAgeNotIn(arrayOfNumberToListOfInteger(values));
        }

        public Criteria andAgeNotIn(Set<? extends Number> values) {
            if (values == null || values.isEmpty()) {addCriterion("1=1 /* andAgeNotIn */");return andAgeNotIn(setOfNumberToListOfInteger(values));}
            return andAgeNotIn(setOfNumberToListOfInteger(values));
        }

        public Criteria andIf(String field, String operator, Object value) {
            return andIf(field, operator, value, null, null);
        }

        public Criteria andIf(String field, String operator, Object value, String beforeValue, String afterValue) {
            if (field == null || field.trim().length() == 0) { field = "null"; }
            if (operator == null) { addCriterion("1=2 /* "+field.replaceAll("[^0-9A-Za-z _.()]","")+".operator */ "); return (Criteria)this; }
            if (value == null) { addCriterion("1=2 /* "+field.replaceAll("[^0-9A-Za-z _.()]","")+".value */ "); return (Criteria)this; }
            if (value instanceof java.util.Date) value = new java.sql.Date(((java.util.Date)value).getTime());
            String condition = field + " "+operator+" ";
            Criterion c = new Criterion(condition, value);
            if (beforeValue != null) c.beforeValue = beforeValue;
            if (afterValue != null) c.afterValue = afterValue;
            criteria.add(c);
            return (Criteria)this;
        }

        public Criteria andRightIf(Object value, String operator, String field) {
            return andRightIf(value, operator, field, null, null);
        }

        public Criteria andRightIf(Object value, String operator, String field, String beforeValue, String afterValue) {
            if (field == null || field.trim().length() == 0) { field = "null"; }
            if (operator == null) { addCriterion("1=2 /* "+field.replaceAll("[^0-9A-Za-z _.()]","")+".operator */ "); return (Criteria)this; }
            if (value == null) { addCriterion("1=2 /* "+field.replaceAll("[^0-9A-Za-z _.()]","")+".value */ "); return (Criteria)this; }
            if (value instanceof java.util.Date) value = new java.sql.Date(((java.util.Date)value).getTime());
            String condition = " "+operator+" "+field;
            Criterion c = new Criterion(condition, value);
            if (beforeValue != null) c.beforeValue = beforeValue;
            if (afterValue != null) c.afterValue = afterValue;
            c.rightValue = true;
            criteria.add(c);
            return (Criteria)this;
        }
    }

    public static class Criteria extends GeneratedCriteria {
        private UserExample _owner;

        private Criteria _parent;

        protected Criteria() {
            super();
        }

        public UserExample criteria() {
            return _owner;
        }

        private void criteria(UserExample owner) {
            this._owner = owner;
        }

        public Criteria andOr() {
            Criteria c = _owner.createCriteriaInternal();
            c._parent = this;
            criteria.add(new Criterion(c));
            return c;
        }

        public Criteria endOr() {
            return _parent != null ? _parent : this;
        }
    }

    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        private String afterValue = "";

        private String beforeValue = "";

        private boolean rightValue;

        private Criteria sub;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }

        public String getAfterValue() {
            return afterValue;
        }

        public String getBeforeValue() {
            return beforeValue;
        }

        public boolean isRightValue() {
            return rightValue;
        }

        protected Criterion(Criteria sub) {
            super();
            this.sub = sub;
        }

        public Criteria getSubCriteria() {
            return sub;
        }

        public boolean isComplex() {
            return sub != null;
        }
    }
}